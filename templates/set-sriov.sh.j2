#!/bin/bash

# setting up SR-IOV on the Mellanox cards
# to be done once for the server: enable sr-iov from BIOS

# card's firmware config must be done only once per card
# to find out DEVID: lspci | grep -i mell
# mstconfig -y -d $DEVID set SRIOV_EN=1 NUM_OF_VFS=$VFNUM
# mstconfig -y -d 63:00.0 set SRIOV_EN=1 NUM_OF_VFS=4
# mstconfig -y -d a1:00.0 set SRIOV_EN=1 NUM_OF_VFS=4


# the rest must be done every boot
# VFs number must be equal to NUM_OF_VFS= (!)
VFNUM={{ sriov_num_vf }}


# letting mellanox driver know how many VFs we want to initiate
{% for line in sriov_ib_pci_bus %}
echo "$VFNUM" > /sys/class/infiniband/mlx5_{{loop.index0}}/device/sriov_numvfs
{% endfor %}

# setting up GUIDs and activatings VF interfaces
# ftr: ib2, ib0 vf 0, mlx5_2, 63:00.1 are all about the same VF
declare -A mlx
{% for item in sriov_ib_pci_bus %}
mlx+=([ib{{loop.index0}}]='{{item}}')
{% endfor %}
#mlx=([ib0]='63:00' [ib1]='a1:00')  # ib interface as an index and PCI ID part as a value

for ibif in "${!mlx[@]}"; do
  if ip link show $ibif &> /dev/null ; then
    for vf in $(seq 0 $((VFNUM-1))); do
      # setting GUIDs, generic but unique enough (using DEVID and VF as an association)
      ip link set dev $ibif vf $vf node_guid "{{sriov_guid_prefix}}:${mlx[$ibif]}:${vf}1"
      ip link set dev $ibif vf $vf port_guid "{{sriov_guid_prefix}}:${mlx[$ibif]}:${vf}2"
      echo 0000:${mlx[$ibif]}.$((vf+1)) > /sys/bus/pci/drivers/mlx5_core/unbind
      echo 0000:${mlx[$ibif]}.$((vf+1)) > /sys/bus/pci/drivers/mlx5_core/bind
      # activating VF port
      ip link set dev $ibif vf $vf state auto
    done
  fi
done

# when done, check with ibstat that port/node GUIDs are non-zero and Status is Active
